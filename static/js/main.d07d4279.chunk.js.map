{"version":3,"sources":["components/auth/auth.module.css","components/tweet-maker/tweet-maker.module.css","components/tweet/tweet.module.css","components/profile/profile.module.css","components/nav/nav.module.css","components/loading-spinner/loading-spinner.module.css","components/home/home.module.css","firebase.js","components/tweet/tweet.jsx","components/tweet-maker/tweet-maker.jsx","components/home/home.jsx","components/auth/auth.jsx","components/profile/profile.jsx","components/nav/nav.jsx","components/router.jsx","components/loading-spinner/loading-spinner.jsx","app.jsx","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","Tweet","tweetObj","isOwner","useState","update","setUpdate","text","newTweet","setNewTweet","onDelete","window","confirm","doc","id","delete","refFromURL","imgFileUrl","toggleUpdate","prev","onSubmit","event","preventDefault","className","styles","tweet","tweet_update","onChange","target","value","type","placeholder","required","form_input","form_btn","onClick","cancel_btn","src","alt","tweet_actions","icon","faTrash","faPencilAlt","TweetMaker","userObj","setTweet","imgFile","setImgFile","fileRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maker_form","maker_input_container","maxLength","maker_input_tweet","maker_input_submit","for","maker_input_label","faPlus","accept","theFile","files","reader","FileReader","Boolean","readAsDataURL","onloadend","finishedEvent","currentTarget","result","maker_input_img","maker_form_img","maker_form_img_remove","faTimes","Home","tweets","setTweets","useEffect","orderBy","onSnapshot","snapshot","tweetArray","docs","map","data","container","tweet_container","Auth","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","onSocialLogin","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","auth_container","faTwitter","color","sizze","style","marginBottom","auth_form_container","auth_input","auth_submit","auth_error","auth_switch","login_btns","login_btn","faGoogle","faGithub","Profile","refreshUser","displayName","newProfileName","setNewProfileName","history","useHistory","updateProfile","Profile_form","signOut","push","log_out","Nav","nav_container","to","exact","home_link","size","profile_link","faUser","profile_name","Router","isLoggedIn","path","LoadingSpinner","loading_spinner_container","loading_spinner","loading_text","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d07d4279.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth_container\":\"auth_auth_container__EQT4v\",\"auth_form_container\":\"auth_auth_form_container__G1uK4\",\"auth_input\":\"auth_auth_input__3xuG1\",\"auth_submit\":\"auth_auth_submit__2I-I_\",\"auth_error\":\"auth_auth_error__1BoIs\",\"auth_switch\":\"auth_auth_switch__2JRWK\",\"login_btns\":\"auth_login_btns__6sw6l\",\"login_btn\":\"auth_login_btn__3yS2k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"maker_form\":\"tweet-maker_maker_form__1e9kG\",\"maker_input_container\":\"tweet-maker_maker_input_container__1YEyC\",\"maker_input_tweet\":\"tweet-maker_maker_input_tweet__Dm8JL\",\"maker_input_submit\":\"tweet-maker_maker_input_submit__MxqhN\",\"maker_input_label\":\"tweet-maker_maker_input_label__3GexX\",\"maker_input_img\":\"tweet-maker_maker_input_img__2RgNj\",\"maker_form_img\":\"tweet-maker_maker_form_img__3eYC0\",\"maker_form_img_remove\":\"tweet-maker_maker_form_img_remove__1d5nM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tweet_update\":\"tweet_tweet_update__1v41D\",\"form_input\":\"tweet_form_input__3UKKD\",\"form_btn\":\"tweet_form_btn__3niFu\",\"cancel_btn\":\"tweet_cancel_btn__11mnh\",\"tweet\":\"tweet_tweet__1-TXm\",\"tweet_actions\":\"tweet_tweet_actions__1CIu4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"profile_container__2gWX9\",\"profile_form\":\"profile_profile_form__22O1_\",\"form_input\":\"profile_form_input__34bcj\",\"form_btn\":\"profile_form_btn__1_QgR\",\"log_out\":\"profile_log_out__-_NxR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav_container\":\"nav_nav_container__1xph_\",\"home_link\":\"nav_home_link__2vnyT\",\"profile_link\":\"nav_profile_link__26KpE\",\"profile_name\":\"nav_profile_name__1EMnm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading_spinner_container\":\"loading-spinner_loading_spinner_container__3MjrO\",\"loading_spinner\":\"loading-spinner_loading_spinner__PwaLZ\",\"spin\":\"loading-spinner_spin__1L87y\",\"loading_text\":\"loading-spinner_loading_text__2UcA5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"home_container__C6GMU\",\"tweet_container\":\"home_tweet_container__3Dztf\"};","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// 파이어베이스\r\nexport const firebaseInstance = firebase;\r\n\r\n// 인증\r\nexport const authService = firebase.auth();\r\n\r\n// 데이터베이스\r\nexport const dbService = firebase.firestore();\r\n\r\n// 파일 스토리지\r\nexport const storageService = firebase.storage();","import React, { useState } from 'react';\r\nimport { dbService, storageService } from '../../firebase';\r\nimport styles from './tweet.module.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction Tweet({ tweetObj, isOwner }) {\r\n  const [update, setUpdate] = useState(false);\r\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n\r\n  // 트윗 삭제\r\n  const onDelete = async () => {\r\n    const delteConfirm = window.confirm('트윗을 삭제 하시겠습니까?');\r\n\r\n    // 확인창의 확인 버튼 누르면 삭제 (true 반영)\r\n    if (delteConfirm) {\r\n      // 트윗 삭제\r\n      await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n      // 트윗의 사진 삭제\r\n      await storageService.refFromURL(tweetObj.imgFileUrl).delete();\r\n    }\r\n  };\r\n\r\n  // 수정 버튼 누를시 수정 내용 입력하는 창 나옴\r\n  const toggleUpdate = () => setUpdate((prev) => !prev);\r\n\r\n  // 트윗 수정\r\n  const onChange = (event) => {\r\n    setNewTweet(event.target.value);\r\n  };\r\n\r\n  // 수정된 내용 DB에 반영\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // DB 수정\r\n    await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n      text: newTweet,\r\n    });\r\n\r\n    // 수정하는 입력 창 없앰\r\n    setUpdate(false);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.tweet}>\r\n      {update ? (\r\n        <form onSubmit={onSubmit} className={styles.tweet_update}>\r\n          <input\r\n            onChange={onChange}\r\n            type=\"text\"\r\n            placeholder=\"트윗 내용을 수정하세요.\"\r\n            value={newTweet}\r\n            required\r\n            className={styles.form_input}\r\n          />\r\n          <button type=\"submit\" className={styles.form_btn}>\r\n            수정\r\n          </button>\r\n          <button onClick={toggleUpdate} className={styles.cancel_btn}>\r\n            취소\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        <>\r\n          <h4>{tweetObj.text}</h4>\r\n          {tweetObj.imgFileUrl && (\r\n            <img src={tweetObj.imgFileUrl} alt=\"이미지\" />\r\n          )}\r\n          {isOwner && (\r\n            <div className={styles.tweet_actions}>\r\n              <span onClick={onDelete}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleUpdate}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tweet;\r\n","import React, { useState } from 'react';\r\nimport { dbService, storageService } from '../../firebase';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './tweet-maker.module.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction TweetMaker({ userObj }) {\r\n  const [tweet, setTweet] = useState();\r\n  const [imgFile, setImgFile] = useState('');\r\n\r\n  // 트윗 내용 입력\r\n  const onChange = (event) => {\r\n    setTweet(event.target.value);\r\n  };\r\n\r\n  // 트윗 DB에 저장\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    let imgFileUrl = '';\r\n\r\n    if (imgFile !== '') {\r\n      /* 파일에 대한 레퍼런스를 만듦 \r\n      (user id와 uuid로 준 랜덤 값과 함께 \r\n      ( user id는 스토리지에 id별로 폴더를 만들게 되서 user별로 구분이 되게 하고 \r\n      uuid로 사진 이름을 랜덤한 값으로 되게 함))\r\n      */\r\n      const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n\r\n      // 그 후 이미지 파일을 data url형식 (문자열)으로 레퍼런스에 업데이트 (스토리지에 저장됨)\r\n      const response = await fileRef.putString(imgFile, 'data_url');\r\n\r\n      /* 그 다음 스토리지에 저장된 이미지를 url형식으로 가져옴 (트윗에 넣기 위해서)\r\n        그것을 변수에 재할당\r\n      */\r\n      imgFileUrl = await response.ref.getDownloadURL();\r\n    }\r\n\r\n    // DB에 트윗 내용과 이미지 저장\r\n    await dbService.collection('tweets').add({\r\n      text: tweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      imgFileUrl,\r\n    });\r\n\r\n    // DB에 트윗 저장후 state 빈 문자열로 바꿈\r\n    setTweet('');\r\n\r\n    // DB에 저장 후 이미지 state를 빈 문자열로 바꿈\r\n    setImgFile('');\r\n  };\r\n\r\n  // 이미지 올린 것을 화면에 보여줌 (미리보기)\r\n  const onFileChange = (event) => {\r\n    const theFile = event.target.files[0];\r\n\r\n    // 파일 읽는 웹 API\r\n    const reader = new FileReader();\r\n\r\n    // 이미지가 올려져 있으면 파일명 화면에 표시\r\n    if (Boolean(theFile)) {\r\n      reader.readAsDataURL(theFile);\r\n    }\r\n\r\n    // 이미지 로딩 이벤트 끝나고 문자열로 브라우저상에 저장된 이미지 파일 state에 넣음\r\n    reader.onloadend = (finishedEvent) => {\r\n      setImgFile(finishedEvent.currentTarget.result);\r\n    };\r\n  };\r\n\r\n  // 이미지 지우기\r\n  const onClearImage = () => setImgFile('');\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className={styles.maker_form}>\r\n        <div className={styles.maker_input_container}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"생각을 트윗해 보세요.\"\r\n            maxLength={120}\r\n            value={tweet || ''}\r\n            onChange={onChange}\r\n            className={styles.maker_input_tweet}\r\n          />\r\n          <input\r\n            type=\"submit\"\r\n            value=\"트윗\"\r\n            className={styles.maker_input_submit}\r\n          />\r\n        </div>\r\n        <label for=\"img-file\" className={styles.maker_input_label}>\r\n          <span>이미지 추가</span>\r\n          <FontAwesomeIcon icon={faPlus} />\r\n        </label>\r\n        <input\r\n          id=\"img-file\"\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={onFileChange}\r\n          className={styles.maker_input_img}\r\n        />\r\n        {imgFile && (\r\n          <div className={styles.maker_form_img}>\r\n            <img src={imgFile} alt=\"이미지\" />\r\n            <div\r\n              className={styles.maker_form_img_remove}\r\n              onClick={onClearImage}\r\n            >\r\n              <span>이미지 삭제</span>\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TweetMaker;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { dbService } from '../../firebase';\r\nimport Tweet from '../tweet/tweet';\r\nimport TweetMaker from '../tweet-maker/tweet-maker';\r\nimport styles from './home.module.css';\r\n\r\nfunction Home({ userObj }) {\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // DB에 있는 트윗 조회\r\n    const getTweets = () => {\r\n      // DB에 일어나는 작업들 실시간 감지 (데이터 CRUD) 하고 데이터 조회\r\n      dbService\r\n        .collection('tweets')\r\n        .orderBy('createdAt', 'desc')\r\n        .onSnapshot((snapshot) => {\r\n          const tweetArray = snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            ...doc.data(),\r\n          }));\r\n          setTweets(tweetArray);\r\n        });\r\n    };\r\n    getTweets();\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <TweetMaker userObj={userObj} />\r\n      <div className={styles.tweet_container}>\r\n        {tweets.map((tweet) => (\r\n          <Tweet\r\n            key={tweet.id}\r\n            tweetObj={tweet}\r\n            isOwner={tweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState } from 'react';\r\nimport { authService, firebaseInstance } from '../../firebase';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from '@fortawesome/free-brands-svg-icons';\r\nimport styles from './auth.module.css';\r\n\r\nfunction Auth() {\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [newAccount, setNewAccount] = useState(false);\r\n  const [error, setError] = useState();\r\n\r\n  // 이메일과 비빌번호 입력\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n\r\n    if (name === 'email') {\r\n      setEmail(value);\r\n    } else if (name === 'password') {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  // 계정 생성 또는 로그인\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      if (newAccount) {\r\n        // 계정 만들기\r\n        await authService.createUserWithEmailAndPassword(email, password);\r\n      } else {\r\n        // 로그인\r\n        await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  // 눌렀을 때 이메일로 계정 생성 또는 이메일 로그인으로 전환\r\n  const onToggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n  // 구글 로그인 및 깃허브 로그인\r\n  const onSocialLogin = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n\r\n    let provider;\r\n\r\n    if (name === 'google') {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === 'github') {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.auth_container}>\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={'#04AAFF'}\r\n        sizze='3x'\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n\r\n      <form onSubmit={onSubmit} className={styles.auth_form_container}>\r\n        <input\r\n          name='email'\r\n          onChange={onChange}\r\n          type='email'\r\n          placeholder='이메일'\r\n          required\r\n          value={email || ''}\r\n          className={styles.auth_input}\r\n        />\r\n        <input\r\n          name='password'\r\n          onChange={onChange}\r\n          type='password'\r\n          placeholder='비밀번호'\r\n          required\r\n          value={password || ''}\r\n          className={styles.auth_input}\r\n        />\r\n        <input\r\n          type='submit'\r\n          className={styles.auth_submit}\r\n          value={newAccount ? '계정 만들기' : '로그인'}\r\n        />\r\n        {error && <span className={styles.auth_error}>{error}</span>}\r\n      </form>\r\n      <span onClick={onToggleAccount} className={styles.auth_switch}>\r\n        {newAccount ? '로그인' : '계정 만들기'}\r\n      </span>\r\n      <div className={styles.login_btns}>\r\n        <button\r\n          name='google'\r\n          onClick={onSocialLogin}\r\n          className={styles.login_btn}\r\n        >\r\n          구글 로그인 <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button\r\n          name='github'\r\n          onClick={onSocialLogin}\r\n          className={styles.login_btn}\r\n        >\r\n          깃허브 로그인 <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Auth;\r\n","import React, { useState } from 'react';\r\nimport { authService } from '../../firebase';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styles from './profile.module.css';\r\n\r\nfunction Profile({ userObj, refreshUser }) {\r\n  const [newProfileName, setNewProfileName] = useState(userObj.displayName);\r\n  const history = useHistory();\r\n\r\n  // 로그아웃\r\n  const onLogOut = () => {\r\n    authService.signOut();\r\n    history.push('/');\r\n  };\r\n\r\n  // 프로필 이름 수정\r\n  const onChange = (event) => {\r\n    setNewProfileName(event.target.value);\r\n  };\r\n\r\n  // 프로필 이름 수정 사항 적용\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // 현재 프로필 이름과 수정 입력창에 입력한 프로필 이름이 다르면 업데이트 시킴\r\n    if (userObj.displayName !== newProfileName) {\r\n      await userObj.updateProfile({\r\n        displayName: newProfileName,\r\n      });\r\n\r\n      // 프로필 이름 변경 nav에도 적용\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <form onSubmit={onSubmit} className={styles.Profile_form}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"프로필 이름 입력\"\r\n          onChange={onChange}\r\n          value={newProfileName}\r\n          className={styles.form_input}\r\n        />\r\n        <input type=\"submit\" value=\"프로필 수정\" className={styles.form_btn} />\r\n      </form>\r\n      <button onClick={onLogOut} className={styles.log_out}>\r\n        로그아웃\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport styles from './nav.module.css';\r\n\r\nfunction Nav({ userObj }) {\r\n  return (\r\n    <nav>\r\n      <ul className={styles.nav_container}>\r\n        <li>\r\n          <Link to=\"/\" exact=\"true\" className={styles.home_link}>\r\n            <FontAwesomeIcon icon={faTwitter} color={'#04AAFF'} size=\"2x\" />\r\n            <span>홈</span>\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/profile\" className={styles.profile_link}>\r\n            <FontAwesomeIcon icon={faUser} color={'#04AAFF'} size=\"2x\" />\r\n            <span className={styles.profile_name}>\r\n              {userObj.displayName\r\n                ? `${userObj.displayName}의 프로필`\r\n                : '프로필'}\r\n            </span>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Home from './home/home';\r\nimport Auth from './auth/auth';\r\nimport Profile from './profile/profile';\r\nimport Nav from './nav/nav';\r\n\r\nfunction Router({ isLoggedIn, userObj, refreshUser }) {\r\n  return (\r\n    <BrowserRouter>\r\n      {isLoggedIn && <Nav userObj={userObj} />}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <Route path=\"/\" exact>\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n          </>\r\n        ) : (\r\n          <Route path=\"/\">\r\n            <Auth />\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Router;\r\n","import React from 'react';\r\nimport styles from './loading-spinner.module.css';\r\n\r\nfunction LoadingSpinner() {\r\n  return (\r\n    <div className={styles.loading_spinner_container}>\r\n      <div className={styles.loading_spinner}></div>\r\n      <p className={styles.loading_text}>Loading...</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoadingSpinner;","import React, { useState, useEffect } from 'react';\r\nimport { authService } from './firebase';\r\nimport Router from './components/router';\r\nimport LoadingSpinner from './components/loading-spinner/loading-spinner';\r\nimport './app.css';\r\n\r\nfunction App() {\r\n  // firebase 초기화 state\r\n  const [init, setInit] = useState(false);\r\n  // user 로그인 state\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  // user를 기억하기 위한 state\r\n  const [userObj, setUserObj] = useState('');\r\n\r\n  useEffect(() => {\r\n    // user 로그인 상태 변화 감지\r\n    authService.onAuthStateChanged((user) => {\r\n      // 로그인 상태에 따른 분기 처리 (user가 있으면 로그인 상태)\r\n      if (user) {\r\n        setIsLoggedIn(true);\r\n\r\n        /* nav의 프로필 명을 변경할 때 유저 객체가 너무 커서 state 변화가 감지가 안되는 \r\n          문제가 발생 하여 많은 유저 정보들 중 필요한 것만 골라서 state에 넣었음\r\n        */\r\n        setUserObj({\r\n          displayName: user.displayName,\r\n          uid: user.uid,\r\n          updateProfile: (args) => user.updateProfile(args),\r\n        });\r\n      } else {\r\n        setIsLoggedIn(false);\r\n        setUserObj('');\r\n      }\r\n\r\n      setInit(true);\r\n    });\r\n  }, []);\r\n\r\n  // 프로필 페이지에서 프로필 이름 수정 했을 때 그 것을 적용해줌\r\n  const refreshUser = () => {\r\n    const user = authService.currentUser;\r\n\r\n    setUserObj({\r\n      displayName: user.displayName,\r\n      uid: user.uid,\r\n      updateProfile: (args) => user.updateProfile(args),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {init ? (\r\n        <Router\r\n          isLoggedIn={isLoggedIn}\r\n          userObj={userObj}\r\n          refreshUser={refreshUser}\r\n        />\r\n      ) : (\r\n        <LoadingSpinner />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}